import { SearchIcon } from "@chakra-ui/icons";
import {
  Box,
  Button,
  Center,
  Heading,
  Input,
  Spinner,
  Text,
} from "@chakra-ui/react";
import Head from "next/head";
import Link from "next/link";
import { useCurrentPage } from "./hook/useCurrentPage";
import { useFocus } from "~/hooks";

export default function Home() {
  const { event, isFocus, search, data, isFetching, error, debounceValue } =
    useCurrentPage();
  const ref = useFocus();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Center alignItems="center" h="100vh" flexDir="column" gap="41px">
        <Heading fontSize="72px" lineHeight="85.92px" textAlign="center">
          Country
        </Heading>
        <Box
          w="full"
          maxW="700px"
          px={{
            base: "10px",
            lg: "0px",
          }}
          position="relative"
          role="group"
        >
          <Input
            type="text"
            w="full"
            h="60px"
            borderColor="rgba(200, 200, 200, 1)"
            borderWidth={0.5}
            _focus={{
              borderColor: "rgba(131, 98, 242, 0.5)",
              borderWidth: 1,
              outlineColor: "rgba(131, 98, 242, 1)",
              outlineOffset: 1,
            }}
            pl="28px"
            ref={ref}
            rounded="10px"
            value={search}
            onChange={event.handleChange}
            onFocus={event.handleFocus}
            onBlur={event.handleBlur}
            placeholder="Type any country name"
            fontSize="18px"
            lineHeight="21.48px"
            _placeholder={{
              color: "rgba(200, 200, 200, 1)",
            }}
            fontWeight="medium"
            py="20px"
          />
          <SearchIcon
            zIndex={1}
            cursor="pointer"
            position="absolute"
            right={7}
            top={5}
            color={isFocus ? "rgba(131, 98, 242, 1)" : "rgba(200, 200, 200, 1)"}
            boxSize="21.88px"
          />
          <Box
            h={error ? "71px" : "228px"}
            w="full"
            mt="12px"
            rounded="5px"
            bg="white"
            py="25px"
            display={debounceValue.length > 0 ? "flex" : "none"}
            flexDir="column"
            gap="18px"
            overflowY="auto"
            filter="drop-shadow(4px 4px 4px rgba(0, 0, 0, 0.02)) drop-shadow(-4px -4px 4px  rgba(0, 0, 0, 0.02));"
          >
            {isFetching ? (
              <Center my={20}>
                <Spinner />
              </Center>
            ) : !error ? (
              data?.map((el) => (
                <Box key={el.area}>
                  <Button
                    w="full"
                    as={Link}
                    href={`detail?country=${
                      el.name.common
                    }&currencies=${Object.keys(
                      el.currencies
                    )}&callingCode=${el.idd.root.replace("+", "")}${
                      el?.idd?.suffixes.length <= 10 ? el.idd.suffixes : ""
                    }`}
                    justifyContent="start"
                    bg="transparent"
                    px="25px"
                    h="18px"
                    _pressed={{
                      bg: "transparent",
                    }}
                    position="relative"
                    rounded="0"
                    _hover={{
                      _after: {
                        content: "''",
                        position: "absolute",
                        w: "full",
                        top: -2.5,
                        left: 0,
                        right: 0,
                        zIndex: -1,
                        h: "40px",
                        bottom: 0,
                        bg: "rgba(244, 244, 244, 1)",
                      },
                    }}
                  >
                    {el.name.common}
                  </Button>
                </Box>
              ))
            ) : (
              <Text
                display="flex"
                alignItems="center"
                h="71px"
                fontSize="18px"
                lineHeight="21.48px"
                color="rgba(255, 0, 0, 1)"
              >
                Data Not found
              </Text>
            )}
          </Box>
        </Box>
      </Center>
    </>
  );
}
